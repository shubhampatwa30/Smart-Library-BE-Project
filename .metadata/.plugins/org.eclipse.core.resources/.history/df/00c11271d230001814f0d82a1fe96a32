package test4;


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import gnu.io.CommPortIdentifier; 
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent; 
import gnu.io.SerialPortEventListener; 
import java.util.*;



public class SerialTest implements SerialPortEventListener {
	SerialPort serialPort;
	/** The port we're normally going to use. */
	private static final String PORT_NAMES[] = { 
			"/dev/tty.usbserial-A9007UX1", // Mac OS X
			"/dev/ttyACM0", // Raspberry Pi
			"/dev/ttyUSB0", // Linux
			"COM10", // Windows
	};
	/**
	 * A BufferedReader which will be fed by a InputStreamReader 
	 * converting the bytes into characters 
	 * making the displayed results codepage independent
	 */
	private BufferedReader input;
	/** The output stream to the port */
	private OutputStream output;
	/** Milliseconds to block while waiting for port open */
	private static final int TIME_OUT = 2000;
	/** Default bits per second for COM port. */
	private static final int DATA_RATE = 9600;

	public void initialize() {
		// the next line is for Raspberry Pi and 
		// gets us into the while loop and was suggested here was suggested http://www.raspberrypi.org/phpBB3/viewtopic.php?f=81&t=32186
		//  System.setProperty("gnu.io.rxtx.SerialPorts", "/dev/ttyACM0");

		CommPortIdentifier portId = null;
		Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();

		//First, Find an instance of serial port as set in PORT_NAMES.
		while (portEnum.hasMoreElements()) {
			CommPortIdentifier currPortId = (CommPortIdentifier) portEnum.nextElement();
			for (String portName : PORT_NAMES) {
				if (currPortId.getName().equals(portName)) {
					portId = currPortId;
					break;
				}
			}
		}
		if (portId == null) {
			System.out.println("Could not find COM port.");
			return;
		}

		try {
			// open serial port, and use class name for the appName.
			serialPort = (SerialPort) portId.open(this.getClass().getName(),
					TIME_OUT);

			// set port parameters
			serialPort.setSerialPortParams(DATA_RATE,
					SerialPort.DATABITS_8,
					SerialPort.STOPBITS_1,
					SerialPort.PARITY_NONE);

			// open the streams
			input = new BufferedReader(new InputStreamReader(serialPort.getInputStream()));
			output = serialPort.getOutputStream();

			// add event listeners
			serialPort.addEventListener(this);
			serialPort.notifyOnDataAvailable(true);
		} catch (Exception e) {
			System.err.println(e.toString());
		}
	}

	/**
	 * This should be called when you stop using the port.
	 * This will prevent port locking on platforms like Linux.
	 */
	public synchronized void close() {
		if (serialPort != null) {
			serialPort.removeEventListener();
			serialPort.close();
		}
	}

	/**
	 * Handle an event on the serial port. Read the data and print it.
	 */




	public synchronized void serialEvent(SerialPortEvent oEvent) {
		//2
		//		System.out.println("Hello");



		if (oEvent.getEventType() == SerialPortEvent.DATA_AVAILABLE) {
			//		System.out.println("Hello");
			//			int count=1;

			try {

				{
					String inputLine=input.readLine();
					System.out.println("RFID number="+inputLine);


					Connection con = Database.dataConnection();
					Statement stmt=con.createStatement();
					ResultSet rs=stmt.executeQuery("select * from library.student where rfid='"+inputLine+"'");
					while(rs.next())
					{  System.out.println(rs.getInt(1)+"  "+rs.getString(2)+"  "+rs.getInt(3)+"  "+rs.getString(4)+"	"+rs.getString(5)+"  "+rs.getString(6)+"  "+rs.getString(7)+"  "+rs.getInt(8));
					break;
					}
					
					
					
			if (val ==1)
						{
							System.out.println("scan ur book");
							val--;}
			if(val==0) {
				ResultSet rs1=	stmt.executeQuery("select * from library.books where rfid='"+inputLine+"'");
					//x=stmt.executeUpdate("UPDATE books SET status='issuedhjh' WHERE rfid='"+inputLine+"'");
					Date d=new Date();
					d.getDate();
					//System.out.print("welcome");
					while(rs1.next())
					{	System.out.print("get out");
						srno = rs1.getInt(1);
						System.out.print(srno);
						break;
					}
					x=stmt.executeUpdate("UPDATE books SET status='issuedhjnbdsjh' WHERE sr_no="+srno);
					stmt.executeUpdate("UPDATE books SET doi='"+d+"'WHERE sr_no="+srno);
					if(x!=0) {
								System.out.println("issued");
								
					
							}
					}

					
			if(val==2){
						
					System.out.println("scan ur book");
					val++;
			}
			if(val==3) {
						y =stmt.executeUpdate("UPDATE books SET status='returned' WHERE rfid='"+inputLine+"'");
						


					if(y!=0)

					{	
						
						System.out.println("return");

					}
					}


				}			} catch (Exception e) {
					//System.err.println(e.toString());
				}




			//++;
		}//data available chi bracket
		// Ignore all the other eventTypes, but you should consider the other ones.
	}//synchronised event chi bracket

	static int val,y,x,srno;

	
	public static void main(String[] args) throws Exception {
		//static int val;
		System.out.println("issue or return?");
		Scanner sc = new Scanner(System.in);



		val = sc.nextInt();
		int x,y;
		{

			switch(val) {

			case 1: {

				System.out.println("Scan ur card");
				SerialTest main = new SerialTest();
				main.initialize();
				//Thread t=new Thread() {
				//public void run() {
				//the following line will keep this app alive for 1000 seconds,
				//waiting for events to occur and responding to them (printing incoming messages to console).
				//try {Thread.sleep(1000000);} catch (InterruptedException ie) {}
				//}
				//};
				//		t.start();
				System.out.println("Started");
				//System.out.println("Scan ur card");
				break;

			}
			case 2:
			{
				System.out.println("Scan ur card");
				SerialTest main = new SerialTest();
				main.initialize();
				Thread t=new Thread() {
					public void run() {
						//the following line will keep this app alive for 1000 seconds,
						//waiting for events to occur and responding to them (printing incoming messages to console).
						try {Thread.sleep(1000000);} catch (InterruptedException ie) {}
					}
				};
				t.start();
				System.out.println("Started");

				break;


			}	
			default: System.out.println("Fuck off patwa");

			}

		}

		/*SerialTest main = new SerialTest();
		main.initialize();
		Thread t=new Thread() {
			public void run() {
				//the following line will keep this app alive for 1000 seconds,
				//waiting for events to occur and responding to them (printing incoming messages to console).
				try {Thread.sleep(1000000);} catch (InterruptedException ie) {}
			}
		};
		t.start();
		System.out.println("Started");
		 */
	}
}